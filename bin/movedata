#!/usr/bin/env python
"""
CLI-based version of my automated data mover.
"""

import argparse
from pathlib import Path
import platform
from tqdm import tqdm
import shutil
import time


remote_root_win = 'x:/'
remote_root_wsl = '/mnt/frankenshare/'
if platform.system() == 'Linux':
    rt = remote_root_wsl
else:
    rt = remote_root_win

# remote server location
remote = rt+'kevin/raw'

# daq file loc
daq_loc = rt+'setupdaq'

# vis stim data loc
vis_loc = rt+'stimdata'

# new vis stim data loc
vis_loc_new = rt+'kevin/pt-data'

# local destination
if platform.system() == 'Linux':
    destination = '/mnt/data/raw'
else:
    destination = 'f:/experiments'


##--- handle args ---##
parser = argparse.ArgumentParser(description="""Move data from server to desktop for a given experiment.\n
                                                Assumes a date/mouse/epoch folder structure on the server.""")
parser.add_argument('mouse', type=str)
parser.add_argument('date', type=str)
parser.add_argument('--remote', help='remote server location', default=remote, dest='remote')
parser.add_argument('--daqloc', help='daq file location', default=daq_loc, dest='daq_loc')
parser.add_argument('--visloc', help='vis stim file location', default=vis_loc, dest='vis_loc')
parser.add_argument('--dest', help='destination folder', default=destination, dest='destination')
args = parser.parse_args()

for k,v in vars(args).items():
    locals()[k] = v
    
mouse = args.mouse
date = args.date
src = Path(remote, date, mouse)

if not src.exists():
    raise FileNotFoundError(f'Experiment not found at remote path {src}')
    
###---- begin moving files ----###
dst = Path(destination, mouse, date)
daq_loc = Path(daq_loc)
refimg_loc = list(src.glob('*refimg*'))
vis_loc = Path(vis_loc, date, mouse) # same as before, i think date format is different so no need to do [2:]
vis_loc_new = Path(vis_loc_new)

# make the direction locally if it doesn't exist for that mouse
if not dst.parent.exists():
    print(f'Making new folder for mouse {mouse}')
try:
    dst.mkdir(parents=True)
except FileExistsError:
    raise FileExistsError('Experiment already exists? Canceling...')

# find epoch folders
root_data = [fold for fold in src.iterdir()]
root_folders = [f for f in root_data if f.is_dir()]
root_files = [f for f in root_data if f.is_file()]
    
# move all the tiff and other SI files     
print('Moving root folder files...')
time.sleep(1) 
for item in tqdm(root_files):
    shutil.copy(item, dst)

# move the refenece image, if it exists...
print('Searching for reference image...')
if refimg_loc: # if it exists
    print('Moving reference image.')
    shutil.copy(refimg_loc[0], dst)
else:
    print('No reference image found.')

print('Moving epoch folders...')
n = len(root_folders)
for i,item in enumerate(root_folders):
    dir_name = item.stem
    new_folder = dst/dir_name
    new_folder.mkdir()
    print(f"Moving folder '{item.stem}' ({i+1}/{n})...")
    files_in_folder = list(item.glob('*'))
    time.sleep(1)
    for f in tqdm(files_in_folder):
        if f.is_file():
            shutil.copy(f, new_folder)
        elif f.is_dir():
            # shutil.copytree(f, new_folder) # this errors because it tried to copy the whole tree
            pass
        
# download daq file, download multiple if they exist for the same day
print('Searching for DAQ file...')
daq_fname = date + '*' # I think will names it as 2023 vs 23, so used to be date[2:], but not anymore
daq_file = list(daq_loc.glob(daq_fname))
if len(daq_file) == 0:
    print('No DAQ file found, skipping.')
else:
    if len(daq_file) > 1:
        print(f'Multiple DAQ files found for {date}. Downloading them all.')
    else:
        print('Downloading DAQ file.')
    for df in daq_file:
        shutil.copy(df, dst)    

# search for PT files and download
if vis_loc.exists():
    print('Found PT vis stim file(s). Downloading...')
    # make a pt directory
    for f in vis_loc.iterdir():
        shutil.copy(f, dst)
else:
    print('No PT vis files found, skipping.')
    
# search for other PT files and download
if vis_loc_new.exists():
    visfiles_2 = vis_loc_new.glob(f'{date}_{mouse}_*')
    if len(list(visfiles_2)) > 0:
        print('Found PT vis stim file(s) in the new directory. Downloading...')
        for f in visfiles_2:
            shutil.copy(f, dst)
    else:
        print('No PT vis files found in new directory, skipping.')
        
print('Done moving files :)')
print('Have a nice day!')
